// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Thankifi.Persistence.Context;

namespace Thankifi.Persistence.Migrations.ThankifiDb
{
    [DbContext(typeof(ThankifiDbContext))]
    partial class ThankifiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CategoryGratitude", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GratitudesId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "GratitudesId");

                    b.HasIndex("GratitudesId");

                    b.ToTable("CategoryGratitude");
                });

            modelBuilder.Entity("Thankifi.Core.Application.Entity.ApplicationState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("24c372ce-a7c2-4895-8241-3d8d432f61b7"));

                    b.Property<int?>("DatasetVersion")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ApplicationState");
                });

            modelBuilder.Entity("Thankifi.Core.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Thankifi.Core.Entity.Gratitude", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Gratitudes");
                });

            modelBuilder.Entity("Thankifi.Core.Entity.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CategoryGratitude", b =>
                {
                    b.HasOne("Thankifi.Core.Entity.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thankifi.Core.Entity.Gratitude", null)
                        .WithMany()
                        .HasForeignKey("GratitudesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Thankifi.Core.Entity.Gratitude", b =>
                {
                    b.HasOne("Thankifi.Core.Entity.Language", "Language")
                        .WithMany("Gratitudes")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Thankifi.Core.Entity.Language", b =>
                {
                    b.Navigation("Gratitudes");
                });
#pragma warning restore 612, 618
        }
    }
}
