// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Thankifi.Persistence.Context;

#nullable disable

namespace Thankifi.Persistence.Migrations.MetricsDb
{
    [DbContext(typeof(MetricsDbContext))]
    partial class MetricsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Incremental.Common.Metrics.Events.MetricEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("MetricEvent");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MetricEvent");
                });

            modelBuilder.Entity("Incremental.Common.Metrics.Events.WellKnown.BasicMetricEvent", b =>
                {
                    b.HasBaseType("Incremental.Common.Metrics.Events.MetricEvent");

                    b.HasDiscriminator().HasValue("BasicMetricEvent");
                });

            modelBuilder.Entity("Thankifi.Core.Application.Entity.UsageMetricEvent", b =>
                {
                    b.HasBaseType("Incremental.Common.Metrics.Events.MetricEvent");

                    b.Property<string>("Parameters")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("UsageMetricEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
